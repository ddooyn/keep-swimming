<?xml version="1.0" ?>
  <rss
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:content="http://purl.org/rss/1.0/modules/content/"
    xmlns:atom="http://www.w3.org/2005/Atom"
    version="2.0"
  >
    <channel>
        <title><![CDATA[ddoolog]]></title>
        <link>https://ddoolog.vercel.app</link>
        <description>
          <![CDATA[Keep Dev Swimming 🌊🏊️  ]]>
        </description>
        <language>en</language>
        <lastBuildDate>2022-11-04</lastBuildDate>
        <item>
    <title><![CDATA[LeetCode | Two Sum]]></title>
    <link>https://ddoolog.vercel.app/221104</link>
    <pubDate>2022-11-04</pubDate>
    <guid isPermaLink="false">https://ddoolog.vercel.app/221104</guid>
    <description>
    <![CDATA[Top Interview Questions - Array]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="문제" class="heading">문제</h2>
<p><a href="https://leetcode.com/explore/interview/card/top-interview-questions-easy/92/array/546/" target="_blank" rel="noopener noreferer">(링크)</a></p>
<h2 id="풀이" class="heading">풀이</h2>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line line-number" line="1"><span class="token keyword">const</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="2">  <span class="token keyword">let</span> answer<span class="token punctuation">;</span>
</span><span class="code-line line-number" line="3">  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> nums<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="4">    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&#x3C;</span> nums<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="5">      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="6">        answer <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="7">        <span class="token keyword control-flow">break</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="8">      <span class="token punctuation">}</span>
</span><span class="code-line line-number" line="9">    <span class="token punctuation">}</span>
</span><span class="code-line line-number" line="10">  <span class="token punctuation">}</span>
</span><span class="code-line line-number" line="11">  <span class="token keyword control-flow">return</span> answer<span class="token punctuation">;</span>
</span><span class="code-line line-number" line="12"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></code></pre>
<blockquote>
<p><strong>Follow-up: Can you come up with an algorithm that is less than O(n^2) time complexity?</strong><br>
이중 for문을 써서 O(N^2)시간이 걸리는 가장 간단한 방법으로 풀었다. 통과는 했지만 효율적으로 구현하기 위해 다른 풀이를 참고해서 해시 맵을 이용하라고 한다.
해시 맵을 이용하면 삽입, 검색에 걸리는 시간 복잡도가 O(1)이므로, 전체 시간 복잡도를 O(N)으로 줄일 수 있다. 하지만 별도의 메모리 공간을 할당하기 때문에 공간 복잡도는 이중 for문 풀이 O(1)에서 O(N)으로 선형적(linear)으로 증가하게 된다.</p>
</blockquote>
<h2 id="참고" class="heading">참고</h2>
<p><a href="https://youtu.be/NLhkpg9p7VQ" target="_blank" rel="noopener noreferer">(링크)</a></p>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line line-number" line="1"><span class="token keyword">const</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="2">  <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="3">  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> nums<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="4">    <span class="token keyword">let</span> value <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="5">    <span class="token keyword">let</span> complementPair <span class="token operator">=</span> target <span class="token operator">-</span> value<span class="token punctuation">;</span>
</span><span class="code-line line-number" line="6">
</span><span class="code-line line-number" line="7">    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>complementPair<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword nil">undefined</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> <span class="token punctuation">[</span>map<span class="token punctuation">[</span>complementPair<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="8">    <span class="token keyword control-flow">else</span> map<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
</span><span class="code-line line-number" line="9">  <span class="token punctuation">}</span>
</span><span class="code-line line-number" line="10"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></code></pre>
<h3 id="object-대신-map-사용하기">Object 대신 Map 사용하기</h3>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line line-number" line="1"><span class="token keyword">const</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="2">  <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="3">  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> nums<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="4">    <span class="token keyword">let</span> value <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="5">    <span class="token keyword">let</span> complementPair <span class="token operator">=</span> target <span class="token operator">-</span> value<span class="token punctuation">;</span>
</span><span class="code-line line-number" line="6">
</span><span class="code-line line-number highlight-line" line="7">    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span>complementPair<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword nil">undefined</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> <span class="token punctuation">[</span>map<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span>complementPair<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line line-number highlight-line" line="8">    <span class="token keyword control-flow">else</span> map<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="9">  <span class="token punctuation">}</span>
</span><span class="code-line line-number" line="10"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></code></pre>
<blockquote>
<p>자바스크립트에서는 Object를 해시 맵처럼 쓰지말라는 글을 읽어서 이러한 용도로 쓰기 위해 제공되는 <code>Map</code>을 사용해보았다.<br>
객체는 key를 문자형으로 변환하지만, <code>Map</code>은 key의 타입을 변환시키지 않고 그대로 유지한다고 한다. 즉 자료형의 제약이 없다. 또한 맵은 설계 단계부터 데이터 추가, 삭제에 있어서 최적화되어 있기 때문에 단순히 객체를 이용할 때보다 성능 상 이점이 있다.
<code>map[key]</code>는 Map을 쓰는 올바른 방법이 아니다. map을 일반 객체처럼 취급하게 되기 때문인데, 따라서 <code>map</code> 전용 메서드인 <code>get</code>과 <code>set</code> 등을 사용해야 한다.</p>
</blockquote>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[Programmers | 분수의 덧셈, 최대공약수와 최소공배수, N개의 최소공배수]]></title>
    <link>https://ddoolog.vercel.app/221103</link>
    <pubDate>2022-11-03</pubDate>
    <guid isPermaLink="false">https://ddoolog.vercel.app/221103</guid>
    <description>
    <![CDATA[유클리드 호제법, GCD/LCM 관련 3문제 풀이 (Lv 0, 1, 2)]]>
    </description>
    <content:encoded>
      <![CDATA[<ul>
<li><strong>GCD</strong>(<em>Greatest common divisor</em>): 최대공약수</li>
<li><strong>LCM</strong>(<em>Least common multiple</em>): 최소공배수</li>
<li>두 수의 곱은 GCD와 LCM의 곱과 같다.</li>
</ul>
<blockquote>
<p>프로그래머스 0단계 문제들을 구경하다가 분수의 덧셈 문제를 보고 쉽게 풀이가 떠오르지 않아서 당황했다. 최대공약수를 구하는 함수를 만들기 위해 <a href="https://ko.wikipedia.org/wiki/%EC%9C%A0%ED%81%B4%EB%A6%AC%EB%93%9C_%ED%98%B8%EC%A0%9C%EB%B2%95" target="_blank" rel="noopener noreferer">유클리드 호제법</a>을 다시 공부했는데, 예전에 풀었을 때보다 더 간단한 코드를 보고 1단계 문제 복습과 2단계 문제 풀이에 도전했다.</p>
</blockquote>
<h2 id="분수의-덧셈-lv0" class="heading">분수의 덧셈 (Lv.0)</h2>
<p><a href="https://school.programmers.co.kr/learn/courses/30/lessons/120808" target="_blank" rel="noopener noreferer">(문제)</a></p>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line line-number" line="1"><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">denum1<span class="token punctuation">,</span> num1<span class="token punctuation">,</span> denum2<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="2">  <span class="token keyword">let</span> denum <span class="token operator">=</span> denum1 <span class="token operator">*</span> num2 <span class="token operator">+</span> denum2 <span class="token operator">*</span> num1<span class="token punctuation">;</span> <span class="token comment">// 분자</span>
</span><span class="code-line line-number" line="3">  <span class="token keyword">let</span> num <span class="token operator">=</span> num1 <span class="token operator">*</span> num2<span class="token punctuation">;</span> <span class="token comment">// 분모</span>
</span><span class="code-line line-number" line="4">
</span><span class="code-line line-number highlight-line" line="5">  <span class="token keyword">const</span> <span class="token function-variable function">getGCD</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>b <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> a <span class="token operator">:</span> <span class="token function">getGCD</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="6">  <span class="token keyword">const</span> gcd <span class="token operator">=</span> <span class="token function">getGCD</span><span class="token punctuation">(</span>denum<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="7">
</span><span class="code-line line-number" line="8">  <span class="token keyword control-flow">return</span> <span class="token punctuation">[</span>denum <span class="token operator">/</span> gcd<span class="token punctuation">,</span> num <span class="token operator">/</span> gcd<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="9"><span class="token punctuation">}</span>
</span></code></pre>
<blockquote>
<p><code>getGCD</code> 함수에서 두 수를 받아 나머지(더 작은 수, <code>b</code>)가 0이 될 때 최대공약수인 a를 리턴하고, 0이 아니라면 다시 재귀적으로 getGCD를 호출한다.<br>
최종적으로 기약분수를 만들기 위해 각 <code>denum</code>과 <code>num</code>에 구해둔 최대공약수 <code>gcd</code>를 나누면 된다.</p>
</blockquote>
<br>
<h2 id="최대공약수와-최소공배수-lv1" class="heading">최대공약수와 최소공배수 (Lv.1)</h2>
<p><a href="https://school.programmers.co.kr/learn/courses/30/lessons/12940" target="_blank" rel="noopener noreferer">(문제)</a></p>
<h3 id="예전-풀이">예전 풀이</h3>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line line-number" line="1"><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> m</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="2">  <span class="token keyword">const</span> answer <span class="token operator">=</span> <span class="token punctuation">[</span>n<span class="token punctuation">,</span> m<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="3">  answer<span class="token punctuation">.</span><span class="token method function property-access">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="4">  <span class="token keyword">let</span> <span class="token punctuation">[</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>n<span class="token punctuation">,</span> m<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="5">  <span class="token keyword">let</span> r <span class="token operator">=</span> num2 <span class="token operator">%</span> num1<span class="token punctuation">;</span>
</span><span class="code-line line-number" line="6">
</span><span class="code-line line-number" line="7">  <span class="token keyword">const</span> <span class="token function-variable function">getAnswer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line line-number highlight-line" line="8">    <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>r <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line line-number highlight-line" line="9">      num2 <span class="token operator">=</span> num1<span class="token punctuation">;</span>
</span><span class="code-line line-number highlight-line" line="10">      num1 <span class="token operator">=</span> r<span class="token punctuation">;</span>
</span><span class="code-line line-number highlight-line" line="11">      r <span class="token operator">=</span> num2 <span class="token operator">%</span> num1<span class="token punctuation">;</span>
</span><span class="code-line line-number highlight-line" line="12">    <span class="token punctuation">}</span>
</span><span class="code-line line-number" line="13">    <span class="token keyword control-flow">return</span> <span class="token punctuation">[</span>num1<span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">*</span> m<span class="token punctuation">)</span> <span class="token operator">/</span> num1<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="14">    <span class="token comment">// n * m === GCD(num1) * LCM 이므로</span>
</span><span class="code-line line-number" line="15">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="16">
</span><span class="code-line line-number" line="17">  <span class="token keyword control-flow">return</span> r <span class="token operator">?</span> <span class="token function">getAnswer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> answer<span class="token punctuation">;</span>
</span><span class="code-line line-number" line="18"><span class="token punctuation">}</span>
</span></code></pre>
<blockquote>
<p>이때는 큰 수<code>num2</code>에서 작은 수<code>num1</code>를 나눈 나머지(<code>r</code>emainder)를 구하기 위해 오름차순 정렬도 해주었는데, 정렬을 안해도 상관없다.<br>
왜냐하면 작은 수를 큰 수로 나는 나머지는 작은 수 그대로기 때문에 <code>num1</code>과 <code>num2</code>의 자리가 바뀌게 되어 의도대로 동작하게 된다.<br>
분수의 덧셈 풀이에서 활용한 <code>getGCD</code> 함수를 써서 코드를 아래처럼 줄일 수 있었다.</p>
</blockquote>
<h3 id="풀이-개선">풀이 개선</h3>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line line-number" line="1"><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> m</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line line-number highlight-line" line="2">  <span class="token keyword">const</span> <span class="token function-variable function">getGCD</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>b <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> a <span class="token operator">:</span> <span class="token function">getGCD</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="3">  <span class="token keyword">const</span> gcd <span class="token operator">=</span> <span class="token function">getGCD</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="4">  <span class="token keyword control-flow">return</span> <span class="token punctuation">[</span>gcd<span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">*</span> m<span class="token punctuation">)</span> <span class="token operator">/</span> gcd<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="5"><span class="token punctuation">}</span>
</span></code></pre>
<br>
<h2 id="n개의-최소공배수-lv2" class="heading">N개의 최소공배수 (Lv.2)</h2>
<p><a href="https://school.programmers.co.kr/learn/courses/30/lessons/12953" target="_blank" rel="noopener noreferer">(문제)</a></p>
<h3 id="시행착오">시행착오</h3>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line line-number" line="1"><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="2">  <span class="token keyword">let</span> answer <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="3">  <span class="token keyword">let</span> gcd <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line line-number highlight-line" line="4">  <span class="token keyword">const</span> <span class="token function-variable function">getGCD</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>b <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> a <span class="token operator">:</span> <span class="token function">getGCD</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="5">
</span><span class="code-line line-number" line="6">  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="7">    gcd <span class="token operator">=</span> <span class="token function">getGCD</span><span class="token punctuation">(</span>gcd<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="8">  <span class="token punctuation">}</span>
</span><span class="code-line line-number" line="9">
</span><span class="code-line line-number" line="10">  arr<span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>answer <span class="token operator">*=</span> v <span class="token operator">/</span> gcd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="11">  <span class="token keyword control-flow">return</span> answer <span class="token operator">*</span> gcd<span class="token punctuation">;</span>
</span><span class="code-line line-number" line="12"><span class="token punctuation">}</span>
</span></code></pre>
<blockquote>
<p>위 코드로 테스트케이스만 통과했다. 문제 이해도가 낮아 N개 수들의 최대공약수를 구해두고 활용하려고 했었다.<br>
<code>reduce</code>를 사용해서 그때그때 두 수의 최대공약수를 나누어줌으로써 모든 수들의 최소공배수를 구했다.</p>
</blockquote>
<h3 id="통과">통과</h3>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line line-number" line="1"><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line line-number highlight-line" line="2">  <span class="token keyword">const</span> <span class="token function-variable function">getGCD</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>b <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> a <span class="token operator">:</span> <span class="token function">getGCD</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number highlight-line" line="3">  <span class="token keyword control-flow">return</span> arr<span class="token punctuation">.</span><span class="token method function property-access">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> acc <span class="token operator">*</span> <span class="token punctuation">(</span>cur <span class="token operator">/</span> <span class="token function">getGCD</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="4"><span class="token punctuation">}</span>
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[LeetCode | Move Zeroes]]></title>
    <link>https://ddoolog.vercel.app/221102</link>
    <pubDate>2022-11-02</pubDate>
    <guid isPermaLink="false">https://ddoolog.vercel.app/221102</guid>
    <description>
    <![CDATA[Top Interview Questions - Array]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="문제" class="heading">문제</h2>
<p><a href="https://leetcode.com/explore/interview/card/top-interview-questions-easy/92/array/567/" target="_blank" rel="noopener noreferer">(링크)</a></p>
<h2 id="풀이" class="heading">풀이</h2>
<h3 id="시행착오">시행착오</h3>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line line-number" line="1"><span class="token keyword">const</span> <span class="token function-variable function">moveZeroes</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="2">  <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token property-access">length</span>
</span><span class="code-line line-number" line="3">  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="4">      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="5">          nums<span class="token punctuation">.</span><span class="token method function property-access">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="6">          nums<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="7">          len<span class="token operator">--</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="8">      <span class="token punctuation">}</span>
</span><span class="code-line line-number" line="9">  <span class="token punctuation">}</span>
</span><span class="code-line line-number" line="10"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></code></pre>
<blockquote>
<p>케이스 [0,0,1] 일 때 [1,0,0]을 출력해야 하는데 [0,1,0]을 출력했다.<br>
0이 연속으로 올 때 통과할 수 없는 코드였다.</p>
</blockquote>
<h3 id="통과">통과</h3>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line line-number" line="1"><span class="token keyword">const</span> <span class="token function-variable function">moveZeroes</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="2">  <span class="token keyword">let</span> idxArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="3">  <span class="token keyword">let</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="4">
</span><span class="code-line line-number" line="5">  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> nums<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="6">    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="7">      idxArr<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="8">      cnt<span class="token operator">++</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="9">    <span class="token punctuation">}</span>
</span><span class="code-line line-number" line="10">  <span class="token punctuation">}</span>
</span><span class="code-line line-number" line="11">
</span><span class="code-line line-number" line="12">  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> idxArr<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="13">    nums<span class="token punctuation">.</span><span class="token method function property-access">splice</span><span class="token punctuation">(</span>idxArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="14">  <span class="token punctuation">}</span>
</span><span class="code-line line-number" line="15">
</span><span class="code-line line-number" line="16">  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="17">    nums<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="18">  <span class="token punctuation">}</span>
</span><span class="code-line line-number" line="19"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></code></pre>
<blockquote>
<p>통과 목적으로 억지로 풀었지만 마음에 들지 않았다.<br>
leetcode에서 투 포인터 알고리즘을 사용해보라는 힌트가 있길래<br>
고민하다가 다른 풀이를 참고해보았다.</p>
</blockquote>
<h2 id="참고" class="heading">참고</h2>
<p>O(N) time &#x26; O(1) space 풀이 1. <a href="https://youtu.be/vP8-eaIo3is" target="_blank" rel="noopener noreferer">(링크)</a></p>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line line-number" line="1"><span class="token keyword">const</span> <span class="token function-variable function">moveZeroes</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="2">  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="3">
</span><span class="code-line line-number" line="4">  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> nums<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="5">    <span class="token keyword">const</span> num <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="6">
</span><span class="code-line line-number" line="7">    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>num <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="8">      nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>
</span><span class="code-line line-number" line="9">      index<span class="token operator">++</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="10">    <span class="token punctuation">}</span>
</span><span class="code-line line-number" line="11">  <span class="token punctuation">}</span>
</span><span class="code-line line-number" line="12">
</span><span class="code-line line-number" line="13">  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> nums<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="14">    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="15">  <span class="token punctuation">}</span>
</span><span class="code-line line-number" line="16"><span class="token punctuation">}</span>
</span></code></pre>
<blockquote>
<p>0이 아닌 숫자를 만날 때마다 1씩 증가시킨 index부터 for문을 돌아서 0으로 바꿔준다.</p>
</blockquote>
<p>O(N) time &#x26; O(1) space 풀이 2. <a href="https://leetcode.com/problems/move-zeroes/solutions/72069/javascript-solution-beats-93-o-n-time-and-o-1-space/?languageTags=javascript" target="_blank" rel="noopener noreferer">(링크)</a></p>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line line-number" line="1"><span class="token keyword">const</span> <span class="token function-variable function">moveZeroes</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="2">  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> nums<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
</span><span class="code-line line-number" line="3">    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
</span><span class="code-line line-number" line="4">      <span class="token keyword">const</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
</span><span class="code-line line-number" line="5">      nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
</span><span class="code-line line-number" line="6">      nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp
</span><span class="code-line line-number" line="7">    <span class="token punctuation">}</span>
</span><span class="code-line line-number" line="8">  <span class="token punctuation">}</span>
</span><span class="code-line line-number" line="9"><span class="token punctuation">}</span>
</span></code></pre>
<blockquote>
<p>for문 안에서 i, j 변수 두 개를 만들고, 0이 아닌 숫자일 경우 해당 숫자(temp)와 0의 위치(j)를 바꿔준다.<br>
j는 0이 아닌 경우에만 1씩 증가해서 가장 앞에 있는 0의 인덱스를 기억한다.</p>
</blockquote>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[Keep Going, Keep Swimming]]></title>
    <link>https://ddoolog.vercel.app/221101</link>
    <pubDate>2022-11-01</pubDate>
    <guid isPermaLink="false">https://ddoolog.vercel.app/221101</guid>
    <description>
    <![CDATA[블로그를 통해 얻고 싶은 것]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="1년-회고--블로그-이주기" class="heading">1년 회고 &#x26; 블로그 이주기</h2>
<p><strong>퇴사 후 개발 공부를 시작한 지 만 1년이 지났다.</strong></p>
<p>TIL 이란 개념을 접하고 멋쟁이사자처럼 프론트엔드스쿨을 시작하면서 매일의 공부 기록을 남기고자 시도했던 첫 블로그는 velog였다. 마크다운에 익숙해지는 잠깐의 시기가 지나고 나니 글을 쓰기 편리해서 좋았다. 개발을 본격적으로 공부하기 시작하고 접하는 모든 게 재밌어서 하루 동안 배우고 겪은 모든 것들을 글 하나에 꼼꼼하게 모아서 올렸었다. 같은 과정을 듣는 분들이 내가 정리한 걸 보며 복습하기 좋다고 말씀해 주시기도 해서 잠을 줄여가며 3~4주 동안 의욕적으로 했던 것 같다.</p>
<p>하지만 공개적인 곳에 하루하루 글 쓰는 것에 부담을 느끼기 시작했다. 무엇보다도 스스로에게 자신이 없었다. 9시부터 6시까지 수업을 듣고 나름대로는 자기 전까지 남은 시간을 꼬박 투자해 궁금한 내용과 부족한 부분을 보완해서 글을 썼다곤 하지만, 깊이가 얕았고 옳은 정보인지에 대한 판단을 스스로 할 수 없었다. 그리고 결정적으로 자바스크립트를 처음 접하게 되면서 9 to 6로 진행되는 진도의 양을 따라가는 것만으로도 너무 벅찼다.</p>
<p>글 하나를 잘 쓰는 것에 몇 시간을 투자해야 했는데, 공부가 어려워지고 이해가 부족하다 보니 자연스럽게 블로그와는 멀어지게 되었다. 대신 노션을 활용하기 시작했다. 나만 볼 수 있고, 글의 형식을 신경 쓰지 않고 오롯이 공부를 위한 목적으로만 활용할 수 있어 좋았다. 하지만 신입 개발자가 되려면 실력도 물론 중요하지만 블로그로 꾸준함, 성실성을 증명할 수 있어야 한다는 생각이 떠나질 않았다. 역량의 부족을 절실히 느꼈다.</p>
<p>멋사 FE스쿨 12주 과정이 끝나고 스터디와 프로젝트를 하면서 계속 노션을 활용하다가, 또 좋은 기회로 항해 99 X 동북권 ICT 14주 과정에 참여하게 되었다. 여기서는 매주 WIL을 쓰는 것을 권장하고 있었다. 이제는 자바스크립트와 리액트로 프로젝트도 해봤고, 글 쓸 거리가 있지 않을까, 좀 더 잘 쓸 수 있지 않을까 싶어서 다시 블로그를 해야겠다고 결심했다. 그래서 선택한 플랫폼은 티스토리였다. 구글링을 하면서 티스토리 블로그를 많이 접하기도 했고, 마음에 들게 커스터마이징 하고 나니 의욕이 생겼다.</p>
<h2 id="깃허브-블로그를-사용하는-목적" class="heading">깃허브 블로그를 사용하는 목적</h2>
<p><strong>하지만 여전히 글쓰기는 부담스럽고 어려웠다.</strong></p>
<p>이건 내 문제였다. 블로그가 예쁘고말고를 떠나서 본질적으로 좋은 글로 채워진 블로그를 만들고 싶었지만, 괜찮은 글 하나를 쓰는 것에 대한 부담은 전보다 심하면 심해졌지 못하진 않았다. 티스토리 이용도 생각보다 불편했는데, 코드 편집기와 HTML 편집기를 왔다 갔다 하면서 글 자체에 집중하지 못하는 경험을 했다.</p>
<p>또 99일 과정 동안 해야 될 게 많은 바쁜 일정 속에서도 새로 알게 된 지식들을 부지런히 본인의 견해로 쓰시는 분을 알게 되었다. 그래서 개발 블로그에 대한 고민을 한번 털어놓았는데, 부담 갖지 않고 자신만의 지식 창고를 만든다는 느낌으로 글을 쓴다고 하셨다. 어차피 잘 쓰려고 해도 경험이 부족하면 잘 쓸 수가 없다는 것이 요지였다. 그 말에 깨닫는 것이 있어서 공감을 했는데, 그분이 쓰신 글은 내가 보기엔 시간 투자 대비 완성도도 높았다. 내가 쓰고 싶은 글의 방향이었다.</p>
<p>그래서 내린 결론은 개발 내공, 글 쓰는 내공을 쌓아야겠다는 것이었다. 결국 잘 쓰는 것에 대한 부담이 최대 문제였기 때문에, 공부 목적과 꾸준함이라는 목표를 가지고 TIL을 일기처럼 쓰는 습관을 들이고 싶었다. 그러기 위해 깃허브 블로그가 좋겠다는 생각이 들었다. 일단 노션보단 오픈되어 있고, 검색에 노출되지 않으면서 매일 해야 하는 적당한 동기부여가 될 것 같았다. 글 내용을 짧게 쓰더라도 지치지 않고 자유롭게 공부 기록을 남겨보려고 한다.</p>
<h2 id="꾸준히-앞으로-나아가기" class="heading">꾸준히 앞으로 나아가기</h2>
<p><strong>개발에 대한 열정을 계속 더 키워나가고 싶다.</strong></p>
<p>퇴사했을 때의 결심을 잊지 않고, 좋아하는 개발 일을 할 수 있는 개발자가 되기 위해 계속 실력을 쌓아가고 싶다. 블로그에 TIL을 쓰는 작업이 그 밑거름이 되었으면 좋겠다. 이게 익숙해지다 보면 언젠가 <a href="https://jbee.io/essay/writing-of-developers/" target="_blank" rel="noopener noreferer">개발자의 글쓰기, 기술 블로그에 대하여</a> 글에서 말하는 집, 편, 술, 저의 과정을 거치며 단순히 강의 요약이나 짜깁기한 글이 아닌 나만의 언어로 글을 쓸 수 있는 능력을 갖출 수 있을 것 같다. 지치지 말고 하루하루 나아가자!</p>]]>
    </content:encoded>
  </item>
    </channel>
  </rss>